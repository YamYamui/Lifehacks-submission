[
    {
        "id": "1a6deadf723728de",
        "type": "tab",
        "label": "ProjectLifeLine",
        "disabled": false,
        "info": ""
    },
    {
        "id": "80c3a30224c0ec34",
        "type": "tab",
        "label": "Temp",
        "disabled": true,
        "info": ""
    },
    {
        "id": "c679e7d895aac69f",
        "type": "telegram bot",
        "botname": "yam",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "b6d3383a1fabca2f",
        "type": "telegram receiver",
        "z": "1a6deadf723728de",
        "name": "",
        "bot": "c679e7d895aac69f",
        "saveDataDir": "",
        "filterCommands": true,
        "x": 130,
        "y": 180,
        "wires": [
            [
                "48eff28242f154df",
                "8e50982e04b302c7"
            ],
            []
        ]
    },
    {
        "id": "a57f0d2b931375b7",
        "type": "telegram sender",
        "z": "1a6deadf723728de",
        "name": "",
        "bot": "c679e7d895aac69f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 870,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "48eff28242f154df",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "",
        "func": "//msg.payload.content = \"hello from bot\";\n//return msg;\ntemp = msg.payload.content\nmsg.payload.content = null\n\nif (context.global.topicPicked == \"Chemistry/Atomic\")\n    {\n        context.global.q1 = \"Saq Question\"\n    }\n\nif (context.global.topicPicked == \"Maths/G\")\n    {\n        context.global.q2 = temp\n    }\n\nif (context.global.topicPicked == \"AChemistry/Atomic\")\n    {\n        msg.payload.content = \"These are the questions in Chemistry, Atomic Structure.  \\n  1.\"+  context.global.q1 + \"\\n Which one do you want to help answer?\" ;\n        msg.payload.type = \"message\"\n\n    }\n\nif (context.global.topicPicked == \"Chemistry/Atomic\")\n    {\n        msg.payload.content = \"Please type your question.\" ;\n        context.global.topicPicked = null\n        msg.payload.type = \"message\"\n\n    }\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "f8c3f9bee3de2da4",
                "a57f0d2b931375b7"
            ]
        ]
    },
    {
        "id": "9bf7f8eba8384909",
        "type": "telegram event",
        "z": "1a6deadf723728de",
        "name": "",
        "bot": "c679e7d895aac69f",
        "event": "callback_query",
        "autoanswer": false,
        "x": 140,
        "y": 1080,
        "wires": [
            [
                "66e9ed542acf9f87"
            ]
        ]
    },
    {
        "id": "19ca7e7cb7c63c67",
        "type": "telegram command",
        "z": "1a6deadf723728de",
        "name": "",
        "command": "/wanthelp",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "c679e7d895aac69f",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 120,
        "y": 660,
        "wires": [
            [
                "40dba623d5b1094b",
                "8c9f865619473729"
            ],
            []
        ]
    },
    {
        "id": "40dba623d5b1094b",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "inline keyboard message",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n\nvar opts = {\n  reply_to_message_id: msg.payload.messageId,\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Chemistry\",\n                    \"callback_data\": \"Chemistry\"\n                },\n                {\n                    \"text\": \"Physics\",\n                    \"callback_data\": \"Physics\"\n                },\n                {\n                    \"text\": \"Biology\",\n                    \"callback_data\": \"Biology\"\n                },\n                {\n                    \"text\": \"Mathematics\",\n                    \"callback_data\": \"Mathematics\"\n                },\n                {\n                    \"text\": \"Life Coaching\",\n                    \"callback_data\": \"Life Coaching\"\n                }]\n            ]\n  })\n};\n\nmsg.payload.content = 'What subject help are you looking for?';\nmsg.payload.options = opts;\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 660,
        "wires": [
            [
                "8b7b8f383712854d"
            ]
        ]
    },
    {
        "id": "8b7b8f383712854d",
        "type": "telegram sender",
        "z": "1a6deadf723728de",
        "name": "show inline keyboard",
        "bot": "c679e7d895aac69f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 640,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "66e9ed542acf9f87",
        "type": "switch",
        "z": "1a6deadf723728de",
        "name": "sorter",
        "property": "payload.content",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Chemistry",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Physics",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Biology",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Mathematics",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "LifeCoaching",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "AChemistry",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APhysics",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ABiology",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "AMathematics",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ALifeCoaching",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 11,
        "x": 330,
        "y": 1060,
        "wires": [
            [
                "a58d6cd627d8371f"
            ],
            [
                "538e74570cd673d0"
            ],
            [
                "cf62a370dd6f2463"
            ],
            [
                "64225b352d24d644"
            ],
            [
                "65856a4312e973ee"
            ],
            [
                "f4bf5146d9a2fed0"
            ],
            [
                "2cd1b3dc15351f69"
            ],
            [
                "7e2f38453c070dad"
            ],
            [
                "21253d0391684996"
            ],
            [
                "4aa859195d49544e"
            ],
            [
                "1f55aeb0342521a4",
                "cf51764c0dd4e8a1"
            ]
        ]
    },
    {
        "id": "a58d6cd627d8371f",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "inline keyboard message",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n// This is the message id of the initial keyboard that is simply exchanged by a new one.\nvar messageId = context.global.keyboard.messageId;\n\n// This is a sample of how to send a second inline keyboard with modified buttons\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Stoichiometry?\",\n                    \"callback_data\": \"Chemistry/Stoichiometry\"\n                },\n                {\n                    \"text\": \"Atomic Structure\",\n                    \"callback_data\": \"Chemistry/Atomic\"\n                },\n                {\n                    \"text\": \"Chemical bonding\",\n                    \"callback_data\": \"Chemistry/ChemBonding\"\n                },\n                {\n                    \"text\": \"Acid Base Equilibria\",\n                    \"callback_data\": \"Chemistry/AcidBase\"\n                }]\n            ]\n  });\n\n\nvar options = {\n    chat_id : msg.payload.chatId,\n    reply_markup : reply_markup,\n    message_id : messageId\n};\n\nmsg.payload.type = 'editMessageReplyMarkup';\nmsg.payload.content = reply_markup;\nmsg.payload.options = options;\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 840,
        "wires": [
            [
                "bcad912aac406e8a"
            ]
        ]
    },
    {
        "id": "bcad912aac406e8a",
        "type": "telegram sender",
        "z": "1a6deadf723728de",
        "name": "show inline keyboard",
        "bot": "c679e7d895aac69f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 960,
        "y": 840,
        "wires": [
            [
                "d396ce9df0dffd06"
            ]
        ]
    },
    {
        "id": "538e74570cd673d0",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "inline keyboard message",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n// This is the message id of the initial keyboard that is simply exchanged by a new one.\nvar messageId = context.global.keyboard.messageId;\n\n// This is a sample of how to send a second inline keyboard with modified buttons\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Kinematics\",\n                    \"callback_data\": \"Physics/Kinematics\"\n                },\n                {\n                    \"text\": \" Work Energy Power\",\n                    \"callback_data\": \"Physics/Kinematics\"\n                },\n                {\n                    \"text\": \"Waves\",\n                    \"callback_data\": \"Physics/Waves\"\n                },\n                {\n                    \"text\": \"Circular Motion\",\n                    \"callback_data\": \"Physics/CircularMotion\"\n                }]\n            ]\n  });\n\n\nvar options = {\n    chat_id : msg.payload.chatId,\n    reply_markup : reply_markup,\n    message_id : messageId\n};\n\nmsg.payload.type = 'editMessageReplyMarkup';\nmsg.payload.content = reply_markup;\nmsg.payload.options = options;\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 880,
        "wires": [
            [
                "7c0a5d6d73e6bf95"
            ]
        ]
    },
    {
        "id": "7c0a5d6d73e6bf95",
        "type": "telegram sender",
        "z": "1a6deadf723728de",
        "name": "show inline keyboard",
        "bot": "c679e7d895aac69f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 920,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "cf62a370dd6f2463",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "inline keyboard message",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n// This is the message id of the initial keyboard that is simply exchanged by a new one.\nvar messageId = context.global.keyboard.messageId;\n\n// This is a sample of how to send a second inline keyboard with modified buttons\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Cancer\",\n                    \"callback_data\": \"Bio/Ca\"\n                },\n                {\n                    \"text\": \"Gene Expression\",\n                    \"callback_data\": \"Bio/G\"\n                },\n                {\n                    \"text\": \"Carbohydrates\",\n                    \"callback_data\": \"Bio/Car\"\n                },\n                {\n                    \"text\": \"Proteins\",\n                    \"callback_data\": \"Bio/P\"\n                }]\n            ]\n  });\n\n\nvar options = {\n    chat_id : msg.payload.chatId,\n    reply_markup : reply_markup,\n    message_id : messageId\n};\n\nmsg.payload.type = 'editMessageReplyMarkup';\nmsg.payload.content = reply_markup;\nmsg.payload.options = options;\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 940,
        "wires": [
            [
                "b0a3e21c03e2bffa"
            ]
        ]
    },
    {
        "id": "b0a3e21c03e2bffa",
        "type": "telegram sender",
        "z": "1a6deadf723728de",
        "name": "show inline keyboard",
        "bot": "c679e7d895aac69f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 920,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "64225b352d24d644",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "inline keyboard message",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n// This is the message id of the initial keyboard that is simply exchanged by a new one.\nvar messageId = context.global.keyboard.messageId;\n\n// This is a sample of how to send a second inline keyboard with modified buttons\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Differentiation\",\n                    \"callback_data\": \"Maths/D\"\n                },\n                {\n                    \"text\": \"integration\",\n                    \"callback_data\": \"Maths/I\"\n                },\n                {\n                    \"text\": \"Graphs\",\n                    \"callback_data\": \"Maths/G\"\n                },\n                {\n                    \"text\": \"Sigma Notation\",\n                    \"callback_data\": \"Maths/S\"\n                }]\n            ]\n  });\n\n\nvar options = {\n    chat_id : msg.payload.chatId,\n    reply_markup : reply_markup,\n    message_id : messageId\n};\n\nmsg.payload.type = 'editMessageReplyMarkup';\nmsg.payload.content = reply_markup;\nmsg.payload.options = options;\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1000,
        "wires": [
            [
                "f339177ec57826fb"
            ]
        ]
    },
    {
        "id": "f339177ec57826fb",
        "type": "telegram sender",
        "z": "1a6deadf723728de",
        "name": "show inline keyboard",
        "bot": "c679e7d895aac69f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 900,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "65856a4312e973ee",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "inline keyboard message",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n// This is the message id of the initial keyboard that is simply exchanged by a new one.\nvar messageId = context.global.keyboard.messageId;\n\n// This is a sample of how to send a second inline keyboard with modified buttons\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Career?\",\n                    \"callback_data\": \"Life/Career\"\n                },\n                {\n                    \"text\": \"University\",\n                    \"callback_data\": \"Life/uni\"\n                },\n                {\n                    \"text\": \"Relationship\",\n                    \"callback_data\": \"Life/relationship\"\n                }]\n            ]\n  });\n\n\nvar options = {\n    chat_id : msg.payload.chatId,\n    reply_markup : reply_markup,\n    message_id : messageId\n};\n\nmsg.payload.type = 'editMessageReplyMarkup';\nmsg.payload.content = reply_markup;\nmsg.payload.options = options;\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1060,
        "wires": [
            [
                "56ec0146c20d56ef"
            ]
        ]
    },
    {
        "id": "56ec0146c20d56ef",
        "type": "telegram sender",
        "z": "1a6deadf723728de",
        "name": "show inline keyboard",
        "bot": "c679e7d895aac69f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 880,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "6121f276fd8f7b0a",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "",
        "func": "context.global.question = {};\ncontext.global.question[0] = { \"chatId\" : 12345  , \"TopicNo\" : 1 , \"Qes\" : \"hey I dont know\" , \"AnsChartId\" : \"33243243\"};\ncontext.global.question[1] = { \"chatId\" : 143545  , \"TopicNo\" : 2};\n\nmsg.payload = context.global.question;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1960,
        "wires": [
            [
                "417233569f239d8f"
            ]
        ]
    },
    {
        "id": "2612caa06470a80d",
        "type": "inject",
        "z": "1a6deadf723728de",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 440,
        "y": 1960,
        "wires": [
            [
                "6121f276fd8f7b0a"
            ]
        ]
    },
    {
        "id": "417233569f239d8f",
        "type": "debug",
        "z": "1a6deadf723728de",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1960,
        "wires": []
    },
    {
        "id": "8c9f865619473729",
        "type": "debug",
        "z": "1a6deadf723728de",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 720,
        "wires": []
    },
    {
        "id": "5c3157601cf0a4c1",
        "type": "comment",
        "z": "1a6deadf723728de",
        "name": "chemistry",
        "info": "",
        "x": 600,
        "y": 800,
        "wires": []
    },
    {
        "id": "fa4d036fda4fc6e9",
        "type": "comment",
        "z": "1a6deadf723728de",
        "name": "physics",
        "info": "",
        "x": 470,
        "y": 860,
        "wires": []
    },
    {
        "id": "d396ce9df0dffd06",
        "type": "debug",
        "z": "1a6deadf723728de",
        "name": "topic selected",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 780,
        "wires": []
    },
    {
        "id": "1f55aeb0342521a4",
        "type": "debug",
        "z": "1a6deadf723728de",
        "name": "callback",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 1300,
        "wires": []
    },
    {
        "id": "ea624f91d321fc41",
        "type": "telegram command",
        "z": "1a6deadf723728de",
        "name": "",
        "command": "/start",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "c679e7d895aac69f",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 110,
        "y": 420,
        "wires": [
            [
                "770244f2cc53922e"
            ],
            []
        ]
    },
    {
        "id": "770244f2cc53922e",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "",
        "func": "msg.payload.content = \"Welcome.  you can either ask a question (/wanthelp), or answer a question (/givehelp).  Choose from the menu\";\ncontext.global.topicPicked = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 420,
        "wires": [
            [
                "a57f0d2b931375b7"
            ]
        ]
    },
    {
        "id": "001164203eb7f232",
        "type": "inject",
        "z": "80c3a30224c0ec34",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "whatever",
                "v": "43243243242",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sdfs",
        "payloadType": "date",
        "x": 260,
        "y": 120,
        "wires": [
            [
                "cc18dfc7d972decf"
            ]
        ]
    },
    {
        "id": "a99091220a873810",
        "type": "debug",
        "z": "80c3a30224c0ec34",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 120,
        "wires": []
    },
    {
        "id": "cc18dfc7d972decf",
        "type": "change",
        "z": "80c3a30224c0ec34",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "whatever",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 120,
        "wires": [
            [
                "a99091220a873810"
            ]
        ]
    },
    {
        "id": "7b5796213e41737b",
        "type": "function",
        "z": "80c3a30224c0ec34",
        "name": "send markdown",
        "func": "var message = 'You can also send *markdown* formatted messages.';\nmsg.payload = {chatId : 1534532196, type : 'message', content : message};\n\n// activate markdown\nmsg.payload.options = {disable_web_page_preview : true, parse_mode : \"Markdown\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "4cc53234cf78f4e0",
        "type": "inject",
        "z": "80c3a30224c0ec34",
        "name": "Trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payloadType": "date",
        "x": 319.31849670410156,
        "y": 199.4593505859375,
        "wires": [
            [
                "7b5796213e41737b"
            ]
        ]
    },
    {
        "id": "9159b89a58af1676",
        "type": "http in",
        "z": "80c3a30224c0ec34",
        "name": "",
        "url": "/api",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "4e84fab58cf56111"
            ]
        ]
    },
    {
        "id": "4e84fab58cf56111",
        "type": "debug",
        "z": "80c3a30224c0ec34",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "b558778cdd42e50e",
        "type": "webhookrelay",
        "z": "80c3a30224c0ec34",
        "buckets": "forwardingthing",
        "x": 280,
        "y": 460,
        "wires": [
            [
                "6b00b9bd48ff0858",
                "469bd75e3863b197"
            ]
        ]
    },
    {
        "id": "6b00b9bd48ff0858",
        "type": "function",
        "z": "80c3a30224c0ec34",
        "name": "eg response to restapi",
        "func": "return {\n    meta: msg.payload.meta,\n    status: 200,\n        body: \"all is good\",\n        headers: {\n            someheader: ['somevalue']\n        } \n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 460,
        "wires": [
            [
                "b558778cdd42e50e"
            ]
        ]
    },
    {
        "id": "469bd75e3863b197",
        "type": "json",
        "z": "80c3a30224c0ec34",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 470,
        "y": 380,
        "wires": [
            [
                "4e84fab58cf56111"
            ]
        ]
    },
    {
        "id": "5fefc2293b617686",
        "type": "function",
        "z": "80c3a30224c0ec34",
        "name": "response for dialogflow",
        "func": "return {\n    meta: msg.payload.meta,\n    status: 200,\n        body: \"{\\n  \\\"fulfillmentMessages\\\": [\\n    {\\n      \\\"text\\\": {\\n        \\\"text\\\": [\\n          \\\"Text response from webhook\\\"\\n        ]\\n      }\\n    }\\n  ]\\n}\",\n        headers: {\n            someheader: ['somevalue']\n        } \n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "cf51764c0dd4e8a1",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "",
        "func": "context.global.topicPicked = msg.payload.content;\n\nif (msg.payload.content == \"AChemistry/Atomic\") {\n    return msg;\n};\n\nif (msg.payload.content == \"Chemistry/Atomic\") {\n    return msg;\n};\n\nreturn;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1360,
        "wires": [
            [
                "1c7702c4b3081e52",
                "1088de5be8e6d57f"
            ]
        ]
    },
    {
        "id": "711c29547f2ef577",
        "type": "comment",
        "z": "1a6deadf723728de",
        "name": "example of the data structure",
        "info": "",
        "x": 280,
        "y": 1920,
        "wires": []
    },
    {
        "id": "0f281f328fa37e7a",
        "type": "comment",
        "z": "1a6deadf723728de",
        "name": "hardcode for a quick demo",
        "info": "",
        "x": 270,
        "y": 2060,
        "wires": []
    },
    {
        "id": "8e50982e04b302c7",
        "type": "debug",
        "z": "1a6deadf723728de",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 160,
        "wires": []
    },
    {
        "id": "f8c3f9bee3de2da4",
        "type": "debug",
        "z": "1a6deadf723728de",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 120,
        "wires": []
    },
    {
        "id": "f3337c3d3884fa5f",
        "type": "telegram command",
        "z": "1a6deadf723728de",
        "name": "",
        "command": "/givehelp",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "c679e7d895aac69f",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 160,
        "y": 1440,
        "wires": [
            [
                "8b0598579d1437ad"
            ],
            []
        ]
    },
    {
        "id": "8b0598579d1437ad",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "inline keyboard message",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n\nvar opts = {\n  reply_to_message_id: msg.payload.messageId,\n  reply_markup: JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Chemistry\",\n                    \"callback_data\": \"AChemistry\"\n                },\n                {\n                    \"text\": \"Physics\",\n                    \"callback_data\": \"APhysics\"\n                },\n                {\n                    \"text\": \"Biology\",\n                    \"callback_data\": \"ABiology\"\n                },\n                {\n                    \"text\": \"Mathematics\",\n                    \"callback_data\": \"AMathematics\"\n                },\n                {\n                    \"text\": \"Life Coaching\",\n                    \"callback_data\": \"ALife Coaching\"\n                }]\n            ]\n  })\n};\n\nmsg.payload.content = 'What subject are you going to help?';\nmsg.payload.options = opts;\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1440,
        "wires": [
            [
                "7e94073a62ae350e"
            ]
        ]
    },
    {
        "id": "7e94073a62ae350e",
        "type": "telegram sender",
        "z": "1a6deadf723728de",
        "name": "show inline keyboard",
        "bot": "c679e7d895aac69f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 760,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "f4bf5146d9a2fed0",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "inline keyboard message",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n// This is the message id of the initial keyboard that is simply exchanged by a new one.\nvar messageId = context.global.keyboard.messageId;\n\n// This is a sample of how to send a second inline keyboard with modified buttons\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Stoichiometry?\",\n                    \"callback_data\": \"AChemistry/Stoichiometry\"\n                },\n                {\n                    \"text\": \"Atomic Structure\",\n                    \"callback_data\": \"AChemistry/Atomic\"\n                },\n                {\n                    \"text\": \"Chemical bonding\",\n                    \"callback_data\": \"AChemistry/ChemBonding\"\n                },\n                {\n                    \"text\": \"Acid Base Equilibria\",\n                    \"callback_data\": \"AChemistry/AcidBase\"\n                }]\n            ]\n  });\n\n\nvar options = {\n    chat_id : msg.payload.chatId,\n    reply_markup : reply_markup,\n    message_id : messageId\n};\n\nmsg.payload.type = 'editMessageReplyMarkup';\nmsg.payload.content = reply_markup;\nmsg.payload.options = options;\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1140,
        "wires": [
            [
                "f35d2d351c48a793"
            ]
        ]
    },
    {
        "id": "f35d2d351c48a793",
        "type": "telegram sender",
        "z": "1a6deadf723728de",
        "name": "show inline keyboard",
        "bot": "c679e7d895aac69f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1180,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "2cd1b3dc15351f69",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "inline keyboard message",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n// This is the message id of the initial keyboard that is simply exchanged by a new one.\nvar messageId = context.global.keyboard.messageId;\n\n// This is a sample of how to send a second inline keyboard with modified buttons\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Kinematics\",\n                    \"callback_data\": \"APhysics/Kinematics\"\n                },\n                {\n                    \"text\": \" Work Energy Power\",\n                    \"callback_data\": \"APhysics/Kinematics\"\n                },\n                {\n                    \"text\": \"Waves\",\n                    \"callback_data\": \"APhysics/Waves\"\n                },\n                {\n                    \"text\": \"Circular Motion\",\n                    \"callback_data\": \"APhysics/CircularMotion\"\n                }]\n            ]\n  });\n\n\nvar options = {\n    chat_id : msg.payload.chatId,\n    reply_markup : reply_markup,\n    message_id : messageId\n};\n\nmsg.payload.type = 'editMessageReplyMarkup';\nmsg.payload.content = reply_markup;\nmsg.payload.options = options;\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1180,
        "wires": [
            [
                "742c3524aea68732"
            ]
        ]
    },
    {
        "id": "742c3524aea68732",
        "type": "telegram sender",
        "z": "1a6deadf723728de",
        "name": "show inline keyboard",
        "bot": "c679e7d895aac69f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1140,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "7e2f38453c070dad",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "inline keyboard message",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n// This is the message id of the initial keyboard that is simply exchanged by a new one.\nvar messageId = context.global.keyboard.messageId;\n\n// This is a sample of how to send a second inline keyboard with modified buttons\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Cancer\",\n                    \"callback_data\": \"ABio/Ca\"\n                },\n                {\n                    \"text\": \"Gene Expression\",\n                    \"callback_data\": \"ABio/G\"\n                },\n                {\n                    \"text\": \"Carbohydrates\",\n                    \"callback_data\": \"ABio/Car\"\n                },\n                {\n                    \"text\": \"Proteins\",\n                    \"callback_data\": \"ABio/P\"\n                }]\n            ]\n  });\n\n\nvar options = {\n    chat_id : msg.payload.chatId,\n    reply_markup : reply_markup,\n    message_id : messageId\n};\n\nmsg.payload.type = 'editMessageReplyMarkup';\nmsg.payload.content = reply_markup;\nmsg.payload.options = options;\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1240,
        "wires": [
            [
                "c6fa4a93c886c15b"
            ]
        ]
    },
    {
        "id": "c6fa4a93c886c15b",
        "type": "telegram sender",
        "z": "1a6deadf723728de",
        "name": "show inline keyboard",
        "bot": "c679e7d895aac69f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1140,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "21253d0391684996",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "inline keyboard message",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n// This is the message id of the initial keyboard that is simply exchanged by a new one.\nvar messageId = context.global.keyboard.messageId;\n\n// This is a sample of how to send a second inline keyboard with modified buttons\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Differentiation\",\n                    \"callback_data\": \"AMaths/D\"\n                },\n                {\n                    \"text\": \"integration\",\n                    \"callback_data\": \"AMaths/I\"\n                },\n                {\n                    \"text\": \"Graphs\",\n                    \"callback_data\": \"AMaths/G\"\n                },\n                {\n                    \"text\": \"Sigma Notation\",\n                    \"callback_data\": \"AMaths/S\"\n                }]\n            ]\n  });\n\n\nvar options = {\n    chat_id : msg.payload.chatId,\n    reply_markup : reply_markup,\n    message_id : messageId\n};\n\nmsg.payload.type = 'editMessageReplyMarkup';\nmsg.payload.content = reply_markup;\nmsg.payload.options = options;\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1300,
        "wires": [
            [
                "58588ad40e1b31a3"
            ]
        ]
    },
    {
        "id": "58588ad40e1b31a3",
        "type": "telegram sender",
        "z": "1a6deadf723728de",
        "name": "show inline keyboard",
        "bot": "c679e7d895aac69f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1120,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "4aa859195d49544e",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "inline keyboard message",
        "func": "context.global.keyboard = { messageId : msg.payload.messageId };\n// This is the message id of the initial keyboard that is simply exchanged by a new one.\nvar messageId = context.global.keyboard.messageId;\n\n// This is a sample of how to send a second inline keyboard with modified buttons\nvar reply_markup = JSON.stringify({\n    \"inline_keyboard\": [[\n                {\n                    \"text\": \"Career?\",\n                    \"callback_data\": \"Life/Career\"\n                },\n                {\n                    \"text\": \"University\",\n                    \"callback_data\": \"Life/uni\"\n                },\n                {\n                    \"text\": \"Relationship\",\n                    \"callback_data\": \"Life/relationship\"\n                }]\n            ]\n  });\n\n\nvar options = {\n    chat_id : msg.payload.chatId,\n    reply_markup : reply_markup,\n    message_id : messageId\n};\n\nmsg.payload.type = 'editMessageReplyMarkup';\nmsg.payload.content = reply_markup;\nmsg.payload.options = options;\n\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1360,
        "wires": [
            [
                "6139b26ff24085f5"
            ]
        ]
    },
    {
        "id": "6139b26ff24085f5",
        "type": "telegram sender",
        "z": "1a6deadf723728de",
        "name": "show inline keyboard",
        "bot": "c679e7d895aac69f",
        "haserroroutput": false,
        "outputs": 1,
        "x": 1100,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "424955d59136d1ee",
        "type": "inject",
        "z": "1a6deadf723728de",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "bbadedf537a010fe"
            ]
        ]
    },
    {
        "id": "1eb5c5a470ca16a3",
        "type": "debug",
        "z": "1a6deadf723728de",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 80,
        "wires": []
    },
    {
        "id": "bbadedf537a010fe",
        "type": "function",
        "z": "1a6deadf723728de",
        "name": "",
        "func": "msg.payload = context.global.topicPicked;\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 60,
        "wires": [
            [
                "1eb5c5a470ca16a3"
            ]
        ]
    },
    {
        "id": "1c7702c4b3081e52",
        "type": "link out",
        "z": "1a6deadf723728de",
        "name": "1",
        "links": [
            "84075ba3224600b0"
        ],
        "x": 625,
        "y": 1400,
        "wires": []
    },
    {
        "id": "84075ba3224600b0",
        "type": "link in",
        "z": "1a6deadf723728de",
        "name": "",
        "links": [
            "1c7702c4b3081e52"
        ],
        "x": 185,
        "y": 280,
        "wires": [
            [
                "48eff28242f154df"
            ]
        ]
    },
    {
        "id": "1088de5be8e6d57f",
        "type": "debug",
        "z": "1a6deadf723728de",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1400,
        "wires": []
    }
]